
import hotel.management.system.ConnectDB;
import java.util.Vector;
import hotel.management.system.Customer;
import hotel.management.system.Room;
import hotel.management.system.Reservation;
import java.awt.Color;
import java.util.ArrayList;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.TreeSet;
import java.util.concurrent.TimeUnit;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Tran Xuan Thu
 */
public class MainGUI extends javax.swing.JFrame {

    private String user, password;

    /**
     * Creates new form MainGUI
     */
    public MainGUI(String user, String password) {
        this.user = user;
        this.password = password;
        initComponents();
        setLocationRelativeTo(null);
        homeBtnMouseClicked(null);
        homePageComponentShown(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        header = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        menu = new javax.swing.JPanel();
        homeBtn = new javax.swing.JLabel();
        bookingBtn = new javax.swing.JLabel();
        roomBtn = new javax.swing.JLabel();
        custBtn = new javax.swing.JLabel();
        checkOutBtn = new javax.swing.JLabel();
        workSpace = new javax.swing.JPanel();
        homePage = new javax.swing.JPanel();
        logoutBtn = new javax.swing.JButton();
        homeRefreshBtn = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        bookedRoomLabel = new javax.swing.JLabel();
        emptyRoomLabel = new javax.swing.JLabel();
        totalRoomLabel = new javax.swing.JLabel();
        bookingPage = new javax.swing.JPanel();
        bookingAddressTxt = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        bookingCheckOutDateTxt = new javax.swing.JTextField();
        bookingIDProofTxt = new javax.swing.JTextField();
        bookingContactTxt = new javax.swing.JTextField();
        bookingNameCustTxt = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        bookingCheckInDateTxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        bookingDOBTxt = new javax.swing.JTextField();
        jLabel34 = new javax.swing.JLabel();
        bookingDepositTxt = new javax.swing.JTextField();
        bookingConfirmBtn = new javax.swing.JButton();
        jLabel27 = new javax.swing.JLabel();
        bookingRoomNumberTxt = new javax.swing.JTextField();
        bookingSelectRoomsBtn = new javax.swing.JButton();
        jLabel30 = new javax.swing.JLabel();
        bookingCustomerGenderCb = new javax.swing.JComboBox<>();
        jLabel33 = new javax.swing.JLabel();
        bookingCustomerIdTxt = new javax.swing.JTextField();
        bookingLoadInforCustomerBtn = new javax.swing.JButton();
        jLabel35 = new javax.swing.JLabel();
        bookingReservationDateTxt = new javax.swing.JTextField();
        roomPage = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        roomTable = new javax.swing.JTable();
        addRoomBtn = new javax.swing.JButton();
        removeRoomBtn = new javax.swing.JButton();
        editRoomBtn = new javax.swing.JButton();
        updateRoomTaleBtn = new javax.swing.JButton();
        inputForm = new javax.swing.JPanel();
        roomPriceCb = new javax.swing.JComboBox<>();
        jLabel23 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        roomNumberBedCb = new javax.swing.JComboBox<>();
        refreshInputRoomBtn = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        roomTypeCb = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        roomNumberTxt = new javax.swing.JTextField();
        roomCapacityCb = new javax.swing.JComboBox<>();
        jLabel22 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        roomStatusCb = new javax.swing.JComboBox<>();
        jLabel13 = new javax.swing.JLabel();
        roomNoteTxt = new javax.swing.JTextField();
        roomCancelBtn = new javax.swing.JButton();
        roomRoomTypeTxt = new javax.swing.JTextField();
        RoomConfirmEnterRoomTypeCheckBox = new javax.swing.JCheckBox();
        roomRoomPriceTxt = new javax.swing.JTextField();
        roomComfirmEnterRoomPriceCheckBox = new javax.swing.JCheckBox();
        searchRoomBtn = new javax.swing.JButton();
        roomCancelSelectBtn = new javax.swing.JButton();
        customerPage = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        customersTable = new javax.swing.JTable();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        custIdTxt = new javax.swing.JTextField();
        custAddressTxt = new javax.swing.JTextField();
        custNameTxt = new javax.swing.JTextField();
        custDobTxt = new javax.swing.JTextField();
        custContactTxt = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        custIdProofTxt = new javax.swing.JTextField();
        searchCustBtn = new javax.swing.JButton();
        deleteCustBtn = new javax.swing.JButton();
        editCustBtn = new javax.swing.JButton();
        updateCustBtn = new javax.swing.JButton();
        refreshInputCustBtn = new javax.swing.JButton();
        jLabel29 = new javax.swing.JLabel();
        customerGenderCb = new javax.swing.JComboBox<>();
        managementRentRoomPage = new javax.swing.JPanel();
        jLabel28 = new javax.swing.JLabel();
        rentRoomRoomIdTxt = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        rentRoomTable = new javax.swing.JTable();
        jLabel36 = new javax.swing.JLabel();
        viewBillBtn = new javax.swing.JButton();
        confirmCheckOutBtn = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        biilTxt = new javax.swing.JTextArea();
        rentRoomSearchBtn = new javax.swing.JButton();
        rentRoomCustIdTxt = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Hotel Management System");
        setBackground(new java.awt.Color(255, 255, 255));
        setSize(new java.awt.Dimension(11000, 600));

        header.setBackground(new java.awt.Color(187, 32, 25));

        jLabel1.setFont(new java.awt.Font("Californian FB", 1, 28)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("PTIT Hotel");

        javax.swing.GroupLayout headerLayout = new javax.swing.GroupLayout(header);
        header.setLayout(headerLayout);
        headerLayout.setHorizontalGroup(
            headerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headerLayout.createSequentialGroup()
                .addGap(92, 92, 92)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        headerLayout.setVerticalGroup(
            headerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        menu.setBackground(new java.awt.Color(187, 32, 25));
        menu.setForeground(new java.awt.Color(255, 255, 255));

        homeBtn.setBackground(new java.awt.Color(187, 32, 25));
        homeBtn.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        homeBtn.setForeground(new java.awt.Color(255, 255, 255));
        homeBtn.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        homeBtn.setText("  Màn hình chính");
        homeBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        homeBtn.setOpaque(true);
        homeBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                homeBtnMouseClicked(evt);
            }
        });

        bookingBtn.setBackground(new java.awt.Color(187, 32, 25));
        bookingBtn.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        bookingBtn.setForeground(new java.awt.Color(255, 255, 255));
        bookingBtn.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        bookingBtn.setText("  Đặt phòng");
        bookingBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        bookingBtn.setOpaque(true);
        bookingBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bookingBtnMouseClicked(evt);
            }
        });

        roomBtn.setBackground(new java.awt.Color(187, 32, 25));
        roomBtn.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        roomBtn.setForeground(new java.awt.Color(255, 255, 255));
        roomBtn.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        roomBtn.setText("  Thông tin phòng");
        roomBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        roomBtn.setOpaque(true);
        roomBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                roomBtnMouseClicked(evt);
            }
        });

        custBtn.setBackground(new java.awt.Color(187, 32, 25));
        custBtn.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        custBtn.setForeground(new java.awt.Color(255, 255, 255));
        custBtn.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        custBtn.setText("  Thông tin khách hàng");
        custBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        custBtn.setOpaque(true);
        custBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                custBtnMouseClicked(evt);
            }
        });

        checkOutBtn.setBackground(new java.awt.Color(187, 32, 25));
        checkOutBtn.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        checkOutBtn.setForeground(new java.awt.Color(255, 255, 255));
        checkOutBtn.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        checkOutBtn.setText("  Trả phòng");
        checkOutBtn.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        checkOutBtn.setOpaque(true);
        checkOutBtn.setPreferredSize(new java.awt.Dimension(57, 42));
        checkOutBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                checkOutBtnMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout menuLayout = new javax.swing.GroupLayout(menu);
        menu.setLayout(menuLayout);
        menuLayout.setHorizontalGroup(
            menuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(custBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 154, Short.MAX_VALUE)
            .addComponent(roomBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(checkOutBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(bookingBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(homeBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        menuLayout.setVerticalGroup(
            menuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(homeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(bookingBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(checkOutBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(roomBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(custBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        workSpace.setPreferredSize(new java.awt.Dimension(900, 600));
        workSpace.setLayout(new java.awt.CardLayout());

        homePage.setBackground(new java.awt.Color(255, 255, 255));
        homePage.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                homePageComponentShown(evt);
            }
        });

        logoutBtn.setText("Đăng xuất");
        logoutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logoutBtnActionPerformed(evt);
            }
        });

        homeRefreshBtn.setText("Làm mới");
        homeRefreshBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeRefreshBtnActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel6.setText("Tổng số phòng");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel7.setText("Số phòng trống");

        jLabel8.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel8.setText("Số phòng đang thuê");

        javax.swing.GroupLayout homePageLayout = new javax.swing.GroupLayout(homePage);
        homePage.setLayout(homePageLayout);
        homePageLayout.setHorizontalGroup(
            homePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homePageLayout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addGroup(homePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(40, 40, 40)
                .addGroup(homePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(bookedRoomLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(totalRoomLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(emptyRoomLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE))
                .addContainerGap(712, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, homePageLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(homeRefreshBtn)
                .addGap(18, 18, 18)
                .addComponent(logoutBtn)
                .addGap(20, 20, 20))
        );
        homePageLayout.setVerticalGroup(
            homePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homePageLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(homePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(homeRefreshBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(logoutBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(63, 63, 63)
                .addGroup(homePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(emptyRoomLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(homePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bookedRoomLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(homePageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(totalRoomLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(336, Short.MAX_VALUE))
        );

        workSpace.add(homePage, "card2");

        bookingPage.setBackground(new java.awt.Color(255, 255, 255));
        bookingPage.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                bookingPageComponentShown(evt);
            }
        });

        jLabel25.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel25.setText("Địa chỉ");

        jLabel31.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel31.setText("Ngày nhận phòng");

        jLabel20.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel20.setText("Ngày sinh");

        jLabel26.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel26.setText("Liên hệ");

        jLabel32.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel32.setText("Ngày trả phòng");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setText("Họ và tên");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setText("Số căn cước");

        jLabel34.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel34.setText("Đặt cọc");

        bookingConfirmBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        bookingConfirmBtn.setText("Xác nhận");
        bookingConfirmBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookingConfirmBtnActionPerformed(evt);
            }
        });

        jLabel27.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel27.setText("Số phòng");

        bookingSelectRoomsBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        bookingSelectRoomsBtn.setText("Chọn phòng");
        bookingSelectRoomsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookingSelectRoomsBtnActionPerformed(evt);
            }
        });

        jLabel30.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel30.setText("Giới tính");

        bookingCustomerGenderCb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Nam", "Nữ" }));

        jLabel33.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel33.setText("ID khách hàng");

        bookingLoadInforCustomerBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        bookingLoadInforCustomerBtn.setText("Load");
        bookingLoadInforCustomerBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bookingLoadInforCustomerBtnActionPerformed(evt);
            }
        });

        jLabel35.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel35.setText("Ngày đặt phòng");

        javax.swing.GroupLayout bookingPageLayout = new javax.swing.GroupLayout(bookingPage);
        bookingPage.setLayout(bookingPageLayout);
        bookingPageLayout.setHorizontalGroup(
            bookingPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bookingPageLayout.createSequentialGroup()
                .addGap(455, 455, 455)
                .addComponent(bookingConfirmBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(bookingPageLayout.createSequentialGroup()
                .addGap(110, 110, 110)
                .addGroup(bookingPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel33, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel26, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel25, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                    .addComponent(jLabel30, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(bookingPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bookingContactTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 135, Short.MAX_VALUE)
                    .addComponent(bookingAddressTxt)
                    .addComponent(bookingDOBTxt)
                    .addComponent(bookingNameCustTxt)
                    .addComponent(bookingIDProofTxt)
                    .addComponent(bookingCustomerIdTxt)
                    .addGroup(bookingPageLayout.createSequentialGroup()
                        .addComponent(bookingCustomerGenderCb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE)))
                .addGroup(bookingPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(bookingPageLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bookingLoadInforCustomerBtn))
                    .addGroup(bookingPageLayout.createSequentialGroup()
                        .addGap(117, 117, 117)
                        .addGroup(bookingPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bookingPageLayout.createSequentialGroup()
                                .addComponent(jLabel31, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(bookingCheckInDateTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(bookingPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(bookingPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bookingPageLayout.createSequentialGroup()
                                        .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(bookingCheckOutDateTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(bookingPageLayout.createSequentialGroup()
                                        .addComponent(jLabel34, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(bookingDepositTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(bookingPageLayout.createSequentialGroup()
                                    .addGroup(bookingPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(bookingPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(bookingRoomNumberTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                                        .addComponent(bookingReservationDateTxt)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bookingSelectRoomsBtn)))
                .addGap(153, 153, 153))
        );
        bookingPageLayout.setVerticalGroup(
            bookingPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bookingPageLayout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(bookingPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel33, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bookingCustomerIdTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bookingLoadInforCustomerBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(bookingPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(bookingPageLayout.createSequentialGroup()
                        .addGroup(bookingPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(bookingNameCustTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                            .addComponent(bookingSelectRoomsBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(20, 20, 20)
                        .addGroup(bookingPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(bookingPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(bookingReservationDateTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(bookingCustomerGenderCb, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel30, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(bookingPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(bookingRoomNumberTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(20, 20, 20)
                .addGroup(bookingPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(bookingDOBTxt)
                    .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(bookingPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(bookingCheckInDateTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel31, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(20, 20, 20)
                .addGroup(bookingPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(bookingPageLayout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(bookingPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bookingCheckOutDateTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(bookingPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel34, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bookingDepositTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(bookingPageLayout.createSequentialGroup()
                        .addGroup(bookingPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(bookingAddressTxt)
                            .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addGroup(bookingPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(bookingContactTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addGroup(bookingPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(bookingIDProofTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(50, 50, 50)
                .addComponent(bookingConfirmBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(106, 106, 106))
        );

        workSpace.add(bookingPage, "card3");

        roomPage.setBackground(new java.awt.Color(255, 255, 255));
        roomPage.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                roomPageComponentShown(evt);
            }
        });

        roomTable.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        roomTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Số phòng", "Loại phòng", "Số giường", "Số người tối đa", "Giá", "Trạng thái", "Ghi chú"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        roomTable.setRowHeight(25);
        roomTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(roomTable);
        if (roomTable.getColumnModel().getColumnCount() > 0) {
            roomTable.getColumnModel().getColumn(0).setResizable(false);
            roomTable.getColumnModel().getColumn(0).setPreferredWidth(25);
            roomTable.getColumnModel().getColumn(1).setResizable(false);
            roomTable.getColumnModel().getColumn(1).setPreferredWidth(50);
            roomTable.getColumnModel().getColumn(2).setResizable(false);
            roomTable.getColumnModel().getColumn(2).setPreferredWidth(50);
            roomTable.getColumnModel().getColumn(3).setResizable(false);
            roomTable.getColumnModel().getColumn(3).setPreferredWidth(50);
            roomTable.getColumnModel().getColumn(4).setResizable(false);
            roomTable.getColumnModel().getColumn(5).setResizable(false);
            roomTable.getColumnModel().getColumn(6).setResizable(false);
            roomTable.getColumnModel().getColumn(7).setResizable(false);
        }

        addRoomBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        addRoomBtn.setText("Thêm");
        addRoomBtn.setPreferredSize(new java.awt.Dimension(60, 25));
        addRoomBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addRoomBtnActionPerformed(evt);
            }
        });

        removeRoomBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        removeRoomBtn.setText("Xóa");
        removeRoomBtn.setPreferredSize(new java.awt.Dimension(60, 25));
        removeRoomBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeRoomBtnActionPerformed(evt);
            }
        });

        editRoomBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        editRoomBtn.setText("Sửa");
        editRoomBtn.setPreferredSize(new java.awt.Dimension(60, 25));
        editRoomBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editRoomBtnActionPerformed(evt);
            }
        });

        updateRoomTaleBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        updateRoomTaleBtn.setText("Cập nhật");
        updateRoomTaleBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateRoomTaleBtnActionPerformed(evt);
            }
        });

        roomPriceCb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "default" }));
        roomPriceCb.setPreferredSize(new java.awt.Dimension(72, 32));

        jLabel23.setText("VND / 1 đêm");

        jLabel14.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel14.setText("Loại phòng");
        jLabel14.setPreferredSize(new java.awt.Dimension(60, 25));

        roomNumberBedCb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "default", "1", "2", "3", "4" }));
        roomNumberBedCb.setPreferredSize(new java.awt.Dimension(75, 25));

        refreshInputRoomBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        refreshInputRoomBtn.setText("Nhập lại");
        refreshInputRoomBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshInputRoomBtnActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setText("Số phòng");
        jLabel4.setPreferredSize(new java.awt.Dimension(75, 25));

        roomTypeCb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "default", "Thường", "Thương gia", "VIP" }));
        roomTypeCb.setPreferredSize(new java.awt.Dimension(95, 32));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setText("Số giường");
        jLabel5.setPreferredSize(new java.awt.Dimension(75, 25));

        jLabel24.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel24.setText("Số người tối đa");
        jLabel24.setPreferredSize(new java.awt.Dimension(83, 32));

        roomNumberTxt.setPreferredSize(new java.awt.Dimension(75, 32));

        roomCapacityCb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "default", "1", "2", "3", "4" }));
        roomCapacityCb.setPreferredSize(new java.awt.Dimension(72, 32));

        jLabel22.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel22.setText("Giá phòng");

        jLabel12.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel12.setText("Trạng thái");
        jLabel12.setPreferredSize(new java.awt.Dimension(75, 25));

        roomStatusCb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "default", "Trống", "Đã thuê" }));
        roomStatusCb.setPreferredSize(new java.awt.Dimension(75, 25));

        jLabel13.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel13.setText("Ghi chú");
        jLabel13.setPreferredSize(new java.awt.Dimension(75, 25));

        roomNoteTxt.setPreferredSize(new java.awt.Dimension(130, 25));

        roomCancelBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        roomCancelBtn.setText("Hủy ");
        roomCancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomCancelBtnActionPerformed(evt);
            }
        });

        RoomConfirmEnterRoomTypeCheckBox.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        RoomConfirmEnterRoomTypeCheckBox.setText("Loại phòng");

        roomComfirmEnterRoomPriceCheckBox.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        roomComfirmEnterRoomPriceCheckBox.setText("Giá phòng");

        javax.swing.GroupLayout inputFormLayout = new javax.swing.GroupLayout(inputForm);
        inputForm.setLayout(inputFormLayout);
        inputFormLayout.setHorizontalGroup(
            inputFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inputFormLayout.createSequentialGroup()
                .addGroup(inputFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(inputFormLayout.createSequentialGroup()
                        .addGroup(inputFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(inputFormLayout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addGroup(inputFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, 0)
                                .addGroup(inputFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(roomNumberTxt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(roomTypeCb, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, inputFormLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(inputFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(RoomConfirmEnterRoomTypeCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(inputFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(roomNumberBedCb, 0, 137, Short.MAX_VALUE)
                                    .addComponent(roomRoomTypeTxt))))
                        .addGap(57, 57, 57)
                        .addGroup(inputFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(inputFormLayout.createSequentialGroup()
                                .addGroup(inputFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel24, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)
                                    .addComponent(roomComfirmEnterRoomPriceCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel22, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(10, 10, 10)
                                .addGroup(inputFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(inputFormLayout.createSequentialGroup()
                                        .addGap(1, 1, 1)
                                        .addGroup(inputFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(roomRoomPriceTxt)
                                            .addComponent(roomPriceCb, 0, 139, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(roomCapacityCb, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(inputFormLayout.createSequentialGroup()
                                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(roomStatusCb, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(62, 62, 62)
                                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(roomNoteTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(inputFormLayout.createSequentialGroup()
                        .addGap(258, 258, 258)
                        .addComponent(roomCancelBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(81, 81, 81)
                        .addComponent(refreshInputRoomBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(121, Short.MAX_VALUE))
        );
        inputFormLayout.setVerticalGroup(
            inputFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, inputFormLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(inputFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(inputFormLayout.createSequentialGroup()
                        .addGroup(inputFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel24, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(roomCapacityCb, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(23, 23, 23)
                        .addGroup(inputFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(roomPriceCb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addGroup(inputFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(roomComfirmEnterRoomPriceCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(inputFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(roomRoomTypeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(RoomConfirmEnterRoomTypeCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(roomRoomPriceTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(inputFormLayout.createSequentialGroup()
                        .addGroup(inputFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(roomNumberTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(22, 22, 22)
                        .addGroup(inputFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(roomTypeCb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(20, 20, 20)
                .addGroup(inputFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(inputFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(roomNumberBedCb, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(inputFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(inputFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(roomStatusCb, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(roomNoteTxt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(43, 43, 43)
                .addGroup(inputFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(roomCancelBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(refreshInputRoomBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22))
        );

        searchRoomBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        searchRoomBtn.setText("Tìm kiếm");
        searchRoomBtn.setPreferredSize(new java.awt.Dimension(60, 25));
        searchRoomBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchRoomBtnActionPerformed(evt);
            }
        });

        roomCancelSelectBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        roomCancelSelectBtn.setText("Hủy chọn");
        roomCancelSelectBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomCancelSelectBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout roomPageLayout = new javax.swing.GroupLayout(roomPage);
        roomPage.setLayout(roomPageLayout);
        roomPageLayout.setHorizontalGroup(
            roomPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(roomPageLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(roomPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(inputForm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(roomPageLayout.createSequentialGroup()
                        .addComponent(searchRoomBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50)
                        .addComponent(addRoomBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50)
                        .addComponent(editRoomBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48)
                        .addComponent(removeRoomBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(52, 52, 52)
                        .addComponent(roomCancelSelectBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50)
                        .addComponent(updateRoomTaleBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(roomPageLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2)
                .addContainerGap())
        );
        roomPageLayout.setVerticalGroup(
            roomPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, roomPageLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(inputForm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(roomPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(addRoomBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editRoomBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(removeRoomBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(roomCancelSelectBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchRoomBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(updateRoomTaleBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
                .addContainerGap())
        );

        workSpace.add(roomPage, "card4");

        customerPage.setBackground(new java.awt.Color(255, 255, 255));
        customerPage.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                customerPageComponentShown(evt);
            }
        });

        customersTable.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        customersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Họ", "Tên", "Địa chỉ", "Ngày sinh", "Liên hệ", "Trạng thái", "Số căn cước"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        customersTable.setName("Thông tin khách hàng"); // NOI18N
        customersTable.setPreferredSize(new java.awt.Dimension(900, 600));
        customersTable.setRowHeight(25);
        customersTable.getTableHeader().setResizingAllowed(false);
        customersTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(customersTable);
        if (customersTable.getColumnModel().getColumnCount() > 0) {
            customersTable.getColumnModel().getColumn(0).setMinWidth(30);
            customersTable.getColumnModel().getColumn(0).setMaxWidth(1000);
            customersTable.getColumnModel().getColumn(3).setResizable(false);
            customersTable.getColumnModel().getColumn(4).setResizable(false);
            customersTable.getColumnModel().getColumn(5).setResizable(false);
            customersTable.getColumnModel().getColumn(6).setResizable(false);
        }

        jLabel15.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel15.setText("ID Khách hàng");

        jLabel16.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel16.setText("Ngày sinh");

        jLabel17.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel17.setText("Địa chỉ");

        jLabel18.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel18.setText("Họ tên");

        jLabel19.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel19.setText("Liên hệ");

        jLabel21.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel21.setText("Số căn cước");

        searchCustBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        searchCustBtn.setText("Tìm kiếm");
        searchCustBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchCustBtnActionPerformed(evt);
            }
        });

        deleteCustBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        deleteCustBtn.setText("Xóa");
        deleteCustBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteCustBtnActionPerformed(evt);
            }
        });

        editCustBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        editCustBtn.setText("Sửa");
        editCustBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editCustBtnActionPerformed(evt);
            }
        });

        updateCustBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        updateCustBtn.setText("Cập nhật");
        updateCustBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateCustBtnActionPerformed(evt);
            }
        });

        refreshInputCustBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        refreshInputCustBtn.setText("Nhập lại");
        refreshInputCustBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshInputCustBtnActionPerformed(evt);
            }
        });

        jLabel29.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel29.setText("Giới tính");

        customerGenderCb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "default", "Nam", "Nữ" }));

        javax.swing.GroupLayout customerPageLayout = new javax.swing.GroupLayout(customerPage);
        customerPage.setLayout(customerPageLayout);
        customerPageLayout.setHorizontalGroup(
            customerPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(customerPageLayout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(customerPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel29, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(12, 12, 12)
                .addGroup(customerPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(customerPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(custNameTxt)
                        .addComponent(custIdTxt)
                        .addComponent(customerGenderCb, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(custDobTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(custAddressTxt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(60, 60, 60)
                .addGroup(customerPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(customerPageLayout.createSequentialGroup()
                        .addGroup(customerPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE)
                            .addComponent(jLabel21, javax.swing.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(customerPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(custIdProofTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
                            .addComponent(custContactTxt)))
                    .addGroup(customerPageLayout.createSequentialGroup()
                        .addGroup(customerPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(refreshInputCustBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(searchCustBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE))
                        .addGap(20, 20, 20)
                        .addComponent(deleteCustBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(editCustBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(updateCustBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(273, Short.MAX_VALUE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        customerPageLayout.setVerticalGroup(
            customerPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, customerPageLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(customerPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(customerPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(custContactTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(custIdTxt))
                .addGap(20, 20, 20)
                .addGroup(customerPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(customerPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(custNameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(custIdProofTxt))
                .addGroup(customerPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(customerPageLayout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(customerPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel29, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(customerGenderCb, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addGroup(customerPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(custDobTxt)
                            .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(customerPageLayout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addComponent(refreshInputCustBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(20, 20, 20)
                .addGroup(customerPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(customerPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(custAddressTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(deleteCustBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(editCustBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(updateCustBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(searchCustBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 285, Short.MAX_VALUE)
                .addContainerGap())
        );

        workSpace.add(customerPage, "card5");

        managementRentRoomPage.setBackground(new java.awt.Color(255, 255, 255));
        managementRentRoomPage.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                managementRentRoomPageComponentShown(evt);
            }
        });

        jLabel28.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel28.setText("Phòng số");

        rentRoomTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        rentRoomTable.setRowHeight(25);
        rentRoomTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        rentRoomTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane4.setViewportView(rentRoomTable);

        jLabel36.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel36.setText("Mã khách hàng");

        viewBillBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        viewBillBtn.setText("Xem hóa đơn");
        viewBillBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBillBtnActionPerformed(evt);
            }
        });

        confirmCheckOutBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        confirmCheckOutBtn.setText("Xác nhận trả phòng");
        confirmCheckOutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmCheckOutBtnActionPerformed(evt);
            }
        });

        biilTxt.setEditable(false);
        biilTxt.setColumns(20);
        biilTxt.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        biilTxt.setRows(5);
        biilTxt.setTabSize(4);
        jScrollPane3.setViewportView(biilTxt);

        rentRoomSearchBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        rentRoomSearchBtn.setText("Tìm kiếm");
        rentRoomSearchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rentRoomSearchBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout managementRentRoomPageLayout = new javax.swing.GroupLayout(managementRentRoomPage);
        managementRentRoomPage.setLayout(managementRentRoomPageLayout);
        managementRentRoomPageLayout.setHorizontalGroup(
            managementRentRoomPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(managementRentRoomPageLayout.createSequentialGroup()
                .addGroup(managementRentRoomPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(managementRentRoomPageLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 507, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 508, Short.MAX_VALUE))
                    .addGroup(managementRentRoomPageLayout.createSequentialGroup()
                        .addGap(52, 52, 52)
                        .addGroup(managementRentRoomPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel28, javax.swing.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE)
                            .addComponent(jLabel36, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(managementRentRoomPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(rentRoomRoomIdTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                            .addComponent(rentRoomCustIdTxt))
                        .addGap(53, 53, 53)
                        .addComponent(rentRoomSearchBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE)
                        .addGap(105, 105, 105)
                        .addComponent(viewBillBtn)
                        .addGap(133, 133, 133)
                        .addComponent(confirmCheckOutBtn)
                        .addGap(144, 144, 144)))
                .addContainerGap())
        );
        managementRentRoomPageLayout.setVerticalGroup(
            managementRentRoomPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(managementRentRoomPageLayout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(managementRentRoomPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel36, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rentRoomCustIdTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(managementRentRoomPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel28, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(managementRentRoomPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(viewBillBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(confirmCheckOutBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(rentRoomSearchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(rentRoomRoomIdTxt, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addGroup(managementRentRoomPageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 446, Short.MAX_VALUE))
                .addContainerGap())
        );

        workSpace.add(managementRentRoomPage, "card6");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(header, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(menu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(workSpace, javax.swing.GroupLayout.PREFERRED_SIZE, 1039, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(header, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(menu, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(workSpace, javax.swing.GroupLayout.PREFERRED_SIZE, 582, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void bookingBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bookingBtnMouseClicked
        // TODO add your handling code here:
        homePage.setVisible(false);
        roomPage.setVisible(false);
        customerPage.setVisible(false);
        managementRentRoomPage.setVisible(false);
        bookingPage.setVisible(true);

        bookingBtn.setBackground(Color.WHITE);
        bookingBtn.setForeground(Color.BLACK);

        homeBtn.setForeground(Color.WHITE);
        checkOutBtn.setForeground(Color.WHITE);
        roomBtn.setForeground(Color.WHITE);
        custBtn.setForeground(Color.WHITE);
        custBtn.setBackground(Color.getColor("menu"));
        roomBtn.setBackground(Color.getColor("menu"));
        homeBtn.setBackground(Color.getColor("menu"));
        checkOutBtn.setBackground(Color.getColor("menu"));
    }//GEN-LAST:event_bookingBtnMouseClicked

    private void roomBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_roomBtnMouseClicked
        // TODO add your handling code here:
        homePage.setVisible(false);
        bookingPage.setVisible(false);
        customerPage.setVisible(false);
        roomCancelBtn.setVisible(false);
        managementRentRoomPage.setVisible(false);
        roomPage.setVisible(true);

        roomBtn.setBackground(Color.WHITE);
        roomBtn.setForeground(Color.BLACK);

        homeBtn.setForeground(Color.WHITE);
        bookingBtn.setForeground(Color.WHITE);
        checkOutBtn.setForeground(Color.WHITE);
        custBtn.setForeground(Color.WHITE);
        custBtn.setBackground(Color.getColor("menu"));
        homeBtn.setBackground(Color.getColor("menu"));
        bookingBtn.setBackground(Color.getColor("menu"));
        checkOutBtn.setBackground(Color.getColor("menu"));
    }//GEN-LAST:event_roomBtnMouseClicked

    private void custBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_custBtnMouseClicked
        // TODO add your handling code here:
        homePage.setVisible(false);
        bookingPage.setVisible(false);
        roomPage.setVisible(false);
        managementRentRoomPage.setVisible(false);
        customerPage.setVisible(true);

        custBtn.setBackground(Color.WHITE);
        custBtn.setForeground(Color.BLACK);

        homeBtn.setForeground(Color.WHITE);
        bookingBtn.setForeground(Color.WHITE);
        checkOutBtn.setForeground(Color.WHITE);
        roomBtn.setForeground(Color.WHITE);
        roomBtn.setBackground(Color.getColor("menu"));
        homeBtn.setBackground(Color.getColor("menu"));
        bookingBtn.setBackground(Color.getColor("menu"));
        checkOutBtn.setBackground(Color.getColor("menu"));
    }//GEN-LAST:event_custBtnMouseClicked

    private String toTitleCase(String s) {
        String[] words = s.trim().split("\\s+");
        for (int i = 0; i < words.length; i++) {
            words[i] = words[i].substring(0, 1).toUpperCase()
                    + words[i].substring(1).toLowerCase();
        }
        return String.join(" ", words);
    }

    private String getFirstName(String name) {
        name = toTitleCase(name);
        String[] words = name.trim().split("\\s+");
        String res = "";
        for (int i = 0; i < words.length - 1; i++) {
            res += words[i] + " ";
        }
        return res.trim();
    }

    private String getLastName(String name) {
        name = toTitleCase(name);
        String[] words = name.trim().split("\\s+");
        return words[words.length - 1];
    }

    private void showCustomerTable(String query) {
        customersTable.removeAll();
        String[] header = {"ID", "Họ", "Tên", "Giới tính", "Ngày sinh", "Địa chỉ", "Liên hệ", "Số căn cước"};
        DefaultTableModel model = new DefaultTableModel(header, 0);
        ArrayList<Customer> cust = new ConnectDB(user, password).selectCustomerQuery(query);
        SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
        for (Customer i : cust) {
            Vector vector = new Vector();
            vector.add(i.getId());
            vector.add(i.getFirstName());
            vector.add(i.getLastName());
            vector.add(i.getGender());
            vector.add(formatter.format(i.getDob()));
            vector.add(i.getAddress());
            vector.add(i.getContact());
            vector.add(i.getIdProof());
            model.addRow(vector);
        }
        customersTable.setModel(model);
    }

    private void showRoomTable(String query) {
        roomTable.removeAll();
        String[] header = {"ID", "Số phòng", "Loại phòng", "Số giường", "Số người tối đa", "Giá (VND/ Đêm)", "Trạng thái", "Ghi chú"};
        DefaultTableModel model = new DefaultTableModel(header, 0);
        roomTable.setModel(model);
        ArrayList<Room> room = new ConnectDB(user, password).selectQueryRooms(query);
        for (Room i : room) {
            Vector vector = new Vector();
            vector.add(i.getId());
            vector.add(i.getNumber());
            vector.add(i.getType());
            vector.add(i.getNumberBed());
            vector.add(i.getCapacity());
            vector.add(String.format("%,d", i.getPrice()));
            vector.add(i.getStatus());
            vector.add(i.getNote());
            model.addRow(vector);
        }
        roomTable.setModel(model);
    }

    private void showRentRoomTable(String query) {
        rentRoomTable.removeAll();
        String[] header = {"ID", "ID khách hàng", "Số phòng"};
        DefaultTableModel model = new DefaultTableModel(header, 0);
        ArrayList<Reservation> list = new ConnectDB(user, password).selectReservationsQuery(query);
        for (Reservation i : list) {
            Vector vector = new Vector();
            vector.add(i.getId());
            vector.add(i.getCustomerId());
            vector.add(new ConnectDB(user, password).getRoomNumber(" AND (Room_Id = " + i.getRoomId() + ")"));
            model.addRow(vector);
        }
        rentRoomTable.setModel(model);
    }

    private void roomPageComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_roomPageComponentShown
        // TODO add your handling code here:
        refreshInputRoomBtn.doClick();
        showRoomTable("");
        ArrayList<Integer> prices = new ConnectDB(user, password).getAllRoomPrice();
        TreeSet<Integer> ts = new TreeSet<>();
        ts.addAll(prices);
        roomPriceCb.removeAllItems();
        roomPriceCb.addItem("default");
        for (int i : ts) {
            roomPriceCb.addItem(String.format("%,d", i));
        }
    }//GEN-LAST:event_roomPageComponentShown

    private void homeBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_homeBtnMouseClicked
        // TODO add your handling code here:
        homePage.setVisible(true);
        bookingPage.setVisible(false);
        roomPage.setVisible(false);
        customerPage.setVisible(false);

        homeBtn.setBackground(Color.WHITE);
        homeBtn.setForeground(Color.BLACK);

        bookingBtn.setForeground(Color.WHITE);
        checkOutBtn.setForeground(Color.WHITE);
        roomBtn.setForeground(Color.WHITE);
        custBtn.setForeground(Color.WHITE);
        custBtn.setBackground(Color.getColor("menu"));
        roomBtn.setBackground(Color.getColor("menu"));
        bookingBtn.setBackground(Color.getColor("menu"));
        checkOutBtn.setBackground(Color.getColor("menu"));
    }//GEN-LAST:event_homeBtnMouseClicked

    private void removeRoomBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeRoomBtnActionPerformed
//        // TODO add your handling code here:
        int[] rowSelected = roomTable.getSelectedRows();
        if (rowSelected.length <= 0) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn phòng muốn xóa!");
        } else {
            int comfirm = JOptionPane.showConfirmDialog(this, "Bạn có chắc chắn muốn xóa không?", "Thông báo!", JOptionPane.YES_NO_OPTION);
            if (comfirm == JOptionPane.YES_OPTION) {
                for (int i : rowSelected) {
                    if (roomTable.getValueAt(i, 6).toString().compareTo("Đã thuê") == 0) {
                        JOptionPane.showMessageDialog(this, "Không thể xóa phòng đang được thuê!");
                        continue;
                    }
                    Room room = new Room();
                    room.setId(Integer.parseInt(roomTable.getValueAt(i, 0).toString()));
                    boolean flag = new ConnectDB(user, password).deleteRoomQuery(room);
                    if (!flag) {
                        JOptionPane.showMessageDialog(this, "Xảy ra lỗi!");
                    } else {
                        JOptionPane.showMessageDialog(this, "Xóa thành công!");
                    }
                }
                showRoomTable("");
            }
        }
    }//GEN-LAST:event_removeRoomBtnActionPerformed

    private void searchRoomBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchRoomBtnActionPerformed
        // TODO add your handling code here:
        String query = "";
        if (!roomNumberTxt.getText().isEmpty()) {
            query += " AND (Rooms.Room_Number = N'" + roomNumberTxt.getText() + "')";
        }
        if (roomTypeCb.getSelectedIndex() != 0) {
            query += " AND (RoomTypes.Room_Type_Name = N'" + roomTypeCb.getSelectedItem().toString() + "')";
        }
        if (roomNumberBedCb.getSelectedIndex() != 0) {
            query += " AND (Rooms.Number_Bed = " + roomNumberBedCb.getSelectedItem().toString() + ")";
        }
        if (roomCapacityCb.getSelectedIndex() != 0) {
            query += " AND (Rooms.Capacity = " + roomCapacityCb.getSelectedItem().toString() + ")";
        }
        if (roomPriceCb.getSelectedIndex() != 0) {
            query += " AND (Rooms.Price = " + roomPriceCb.getSelectedItem().toString().replace(",", "") + ")";
        }
        if (roomStatusCb.getSelectedIndex() != 0) {
            query += " AND (RoomStatus.Room_Status_Name = N'" + roomStatusCb.getSelectedItem().toString() + "')";
        }
        if (!roomNoteTxt.getText().isEmpty()) {
            query += " AND (Rooms.Note = N'" + roomNoteTxt.getText() + "')";
        }
        showRoomTable(query);
    }//GEN-LAST:event_searchRoomBtnActionPerformed

    private void updateRoomTaleBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateRoomTaleBtnActionPerformed
        // TODO add your handling code here:
        int[] rowSelecteds = roomTable.getSelectedRows();
        if (rowSelecteds.length > 1) {
            JOptionPane.showMessageDialog(this, "Không thể sửa nhiều phòng cùng một lúc!");
        } else {
            int confirm = JOptionPane.showConfirmDialog(this,
                    "Bạn có chắc chắn muốn cập nhật không?", "Thông báo!",
                    JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                String roomTypeName = roomTypeCb.getSelectedItem().toString();
                if (RoomConfirmEnterRoomTypeCheckBox.isSelected()) {
                    roomTypeName = toTitleCase(roomRoomTypeTxt.getText());
                }
                int roomPrice = Integer.parseInt(roomPriceCb.getSelectedItem().toString().replace(",", ""));
                if (roomComfirmEnterRoomPriceCheckBox.isSelected()) {
                    roomPrice = Integer.parseInt(roomRoomPriceTxt.getText());
                }
                Room room = new Room(
                        Integer.parseInt(roomTable.getValueAt(rowSelecteds[0], 0).toString()),
                        roomNumberTxt.getText(),
                        roomTypeName,
                        Integer.parseInt(roomNumberBedCb.getSelectedItem().toString()),
                        Integer.parseInt(roomCapacityCb.getSelectedItem().toString()),
                        roomPrice,
                        roomStatusCb.getSelectedItem().toString(),
                        roomNoteTxt.getText()
                );

                boolean flag = new ConnectDB(user, password).updateRoomQuery(room);
                if (!flag) {
                    JOptionPane.showMessageDialog(this, "Xảy ra lỗi!");
                } else {
                    JOptionPane.showMessageDialog(this, "Cập nhật thành công.");
                    roomCancelBtn.setVisible(false);
                    refreshInputRoomBtn.doClick();
                }
                showRoomTable("");
            }
        }

    }//GEN-LAST:event_updateRoomTaleBtnActionPerformed

    private void editRoomBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editRoomBtnActionPerformed
        // TODO add your handling code here:
        int[] rowSelected = roomTable.getSelectedRows();
        if (rowSelected.length > 1) {
            JOptionPane.showMessageDialog(this, "Không thể sửa nhiều hàng cùng một lúc!");
            roomCancelSelectBtn.doClick();
        } else if (rowSelected.length < 1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn hàng muốn chỉnh sửa!");
        } else {
            roomNumberTxt.setEditable(false);
            roomNumberTxt.setText(roomTable.getValueAt(rowSelected[0], 1).toString());
            roomTypeCb.setSelectedItem(roomTable.getValueAt(rowSelected[0], 2).toString());
            roomNumberBedCb.setSelectedItem(roomTable.getValueAt(rowSelected[0], 3).toString());
            roomCapacityCb.setSelectedItem(roomTable.getValueAt(rowSelected[0], 4).toString());
            roomPriceCb.setSelectedItem(roomTable.getValueAt(rowSelected[0], 5).toString());
            roomStatusCb.setSelectedItem(roomTable.getValueAt(rowSelected[0], 6).toString());
            roomNoteTxt.setText(roomTable.getValueAt(rowSelected[0], 7).toString());
            roomCancelBtn.setVisible(true);
        }
    }//GEN-LAST:event_editRoomBtnActionPerformed

    private void addRoomBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addRoomBtnActionPerformed
        // TODO add your handling code here:
        roomStatusCb.setSelectedIndex(1);
        if (roomNumberTxt.getText().isEmpty()
                || (roomTypeCb.getSelectedIndex() == 0 && roomRoomTypeTxt.getText().isEmpty())
                || roomCapacityCb.getSelectedIndex() == 0
                || (roomPriceCb.getSelectedIndex() == 0 && roomRoomPriceTxt.getText().isEmpty())
                || roomNumberBedCb.getSelectedIndex() == 0) {
            JOptionPane.showMessageDialog(this, "Bạn cần nhập đủ dữ liệu!");
        } else {
            String query = " AND ("
                    + "Room_Number = N'" + roomNumberTxt.getText() + "')";
            ArrayList<Room> rooms = new ConnectDB(user, password).selectQueryRooms(query);
            if (!rooms.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Số phòng này đã tồn tại!");
            } else {
                String roomTypeName;
                if (RoomConfirmEnterRoomTypeCheckBox.isSelected()) {
                    roomTypeName = toTitleCase(roomRoomTypeTxt.getText());
                } else {
                    roomTypeName = roomTypeCb.getSelectedItem().toString();
                }
                int roomTypeId = new ConnectDB(user, password).getRoomTypeIdByRoomTypeName(roomTypeName);

                if (roomTypeId == -1) {
                    roomTypeId = new ConnectDB(user, password).insertRoomType(roomTypeName);
                    if (roomTypeId == -1) {
                        JOptionPane.showMessageDialog(this, "Đã có lỗi xảy ra, vui lòng thử lại sau!");
                        return;
                    }
                }
                String roomStatus = roomStatusCb.getSelectedItem().toString();
                int roomStatusId = new ConnectDB(user, password).getRoomStatusIdByRoomStatusName(roomStatus);
                if (roomStatusId == -1) {
                    roomStatusId = new ConnectDB(user, password).insertRoomStatus(roomStatus);
                    if (roomStatusId == -1) {
                        JOptionPane.showMessageDialog(this, "Đã có lỗi xảy ra, vui lòng thử lại sau!");
                        return;
                    }
                }
                int roomPrice;
                if (roomComfirmEnterRoomPriceCheckBox.isSelected()) {
                    roomPrice = Integer.parseInt(roomRoomPriceTxt.getText());
                } else {
                    roomPrice = Integer.parseInt(roomPriceCb.getSelectedItem().toString().replace(",", ""));
                }

                Room room = new Room(
                        0,
                        roomNumberTxt.getText(),
                        roomTypeName,
                        Integer.parseInt(roomNumberBedCb.getSelectedItem().toString()),
                        Integer.parseInt(roomCapacityCb.getSelectedItem().toString()),
                        roomPrice,
                        roomStatus,
                        roomNoteTxt.getText()
                );
                int confirm = JOptionPane.showConfirmDialog(this,
                        "Bạn có chắn chắn muốn thêm phòng không?",
                        "Thông báo!",
                        JOptionPane.YES_NO_OPTION);
                if (confirm == JOptionPane.YES_OPTION) {
                    if (new ConnectDB(user, password).insertRoom(room) != -1) {
                        JOptionPane.showMessageDialog(this, "Thêm phòng thành công.");
                        showRoomTable("");
                    } else {
                        JOptionPane.showMessageDialog(this,
                                "Đã có lỗi xảy ra, vui lòng thử lại sau!");
                    }
                }
            }
        }
    }//GEN-LAST:event_addRoomBtnActionPerformed

    private void roomCancelSelectBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomCancelSelectBtnActionPerformed
        // TODO add your handling code here:
        roomTable.clearSelection();
    }//GEN-LAST:event_roomCancelSelectBtnActionPerformed

    private void bookingPageComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_bookingPageComponentShown
        // TODO add your handling code here:
        SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
        SimpleDateFormat formatterTime = new SimpleDateFormat("dd/MM/YYYY - hh:mm aa");
        bookingReservationDateTxt.setText(formatter.format(new Date()));
        bookingReservationDateTxt.setEditable(false);
        bookingCheckInDateTxt.setText(formatterTime.format(new Date()));
        int[] rowSelecteds = roomTable.getSelectedRows();
        ArrayList<String> rooms = new ArrayList<>();
        for (int i : rowSelecteds) {
            rooms.add(roomTable.getValueAt(i, 1).toString());
        }
        bookingRoomNumberTxt.setText(String.join(", ", rooms));
    }//GEN-LAST:event_bookingPageComponentShown

    private void bookingConfirmBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookingConfirmBtnActionPerformed
        // TODO add your handling code here:
        SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
        try {
            Customer cust = new Customer(
                    -1,
                    getFirstName(bookingNameCustTxt.getText()),
                    getLastName(bookingNameCustTxt.getText()),
                    bookingCustomerGenderCb.getSelectedItem().toString(),
                    formatter.parse(bookingDOBTxt.getText()),
                    toTitleCase(bookingAddressTxt.getText()),
                    bookingContactTxt.getText(),
                    bookingIDProofTxt.getText()
            );

            ArrayList<Room> room = new ConnectDB(user, password).selectQueryRooms(" AND (Room_Number = " + bookingRoomNumberTxt.getText() + ")");
            if (room.get(0).getStatus().compareTo("Trống") != 0) {
                JOptionPane.showMessageDialog(this, "Phòng này đã được thuê!");
                JOptionPane.showMessageDialog(this, "Đặt phòng không thành công.");
                return;
            }

            Reservation o = new Reservation(-1,
                    cust.getId(),
                    room.get(0).getId(),
                    formatter.parse(bookingReservationDateTxt.getText()),
                    formatter.parse(bookingCheckInDateTxt.getText()),
                    formatter.parse(bookingCheckOutDateTxt.getText()),
                    Integer.parseInt(bookingDepositTxt.getText())
            );

            int id = new ConnectDB(user, password).searchCustomer(cust);
            if (id == -1) {
                id = new ConnectDB(user, password).insertCustomerQuery(cust);
            }
            o.setCustomerId(id);
            int flag = new ConnectDB(user, password).insertReservation(o);
            if (flag == -1) {
                JOptionPane.showMessageDialog(this, "Đã có lỗi xảy ra, vui lòng thử lại sau!");
            } else {
                JOptionPane.showMessageDialog(this, "Đặt phòng thành công.");
            }

        } catch (Exception e) {
            System.out.println(e);
        }

    }//GEN-LAST:event_bookingConfirmBtnActionPerformed

    private void checkOutBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_checkOutBtnMouseClicked
        // TODO add your handling code here:
        homePage.setVisible(false);
        bookingPage.setVisible(false);
        roomPage.setVisible(false);
        customerPage.setVisible(false);
        managementRentRoomPage.setVisible(true);

        checkOutBtn.setBackground(Color.WHITE);
        checkOutBtn.setForeground(Color.BLACK);

        homeBtn.setForeground(Color.WHITE);
        bookingBtn.setForeground(Color.WHITE);
        roomBtn.setForeground(Color.WHITE);
        custBtn.setForeground(Color.WHITE);
        custBtn.setBackground(Color.getColor("menu"));
        homeBtn.setBackground(Color.getColor("menu"));
        bookingBtn.setBackground(Color.getColor("menu"));
        roomBtn.setBackground(Color.getColor("menu"));
    }//GEN-LAST:event_checkOutBtnMouseClicked

    private void bookingSelectRoomsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookingSelectRoomsBtnActionPerformed
        // TODO add your handling code here:
        bookingPage.setVisible(false);
        roomPage.setVisible(true);
    }//GEN-LAST:event_bookingSelectRoomsBtnActionPerformed

    private void roomCancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomCancelBtnActionPerformed
        // TODO add your handling code here:
        roomNumberTxt.setEditable(true);
        refreshInputRoomBtn.doClick();
        roomCancelBtn.setVisible(false);
    }//GEN-LAST:event_roomCancelBtnActionPerformed

    private void refreshInputRoomBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshInputRoomBtnActionPerformed
        // TODO add your handling code here:
        roomNumberTxt.setText("");
        roomNumberBedCb.setSelectedIndex(0);
        roomTypeCb.setSelectedIndex(0);
        roomStatusCb.setSelectedIndex(0);
        roomNoteTxt.setText("");
        roomCapacityCb.setSelectedIndex(0);
        roomPriceCb.setSelectedIndex(0);
        roomRoomTypeTxt.setText("");
        roomRoomPriceTxt.setText("");
        RoomConfirmEnterRoomTypeCheckBox.setSelected(false);
        roomComfirmEnterRoomPriceCheckBox.setSelected(false);
    }//GEN-LAST:event_refreshInputRoomBtnActionPerformed

    private void customerPageComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_customerPageComponentShown
        // TODO add your handling code here:
        refreshInputCustBtn.doClick();
        showCustomerTable("");
    }//GEN-LAST:event_customerPageComponentShown

    private void refreshInputCustBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshInputCustBtnActionPerformed
        // TODO add your handling code here:
        custIdTxt.setText("");
        custNameTxt.setText("");
        customerGenderCb.setSelectedIndex(0);
        custAddressTxt.setText("");
        custDobTxt.setText("");
        custContactTxt.setText("");
        custIdProofTxt.setText("");
    }//GEN-LAST:event_refreshInputCustBtnActionPerformed

    private void updateCustBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateCustBtnActionPerformed
        // TODO add your handling code here:
        int[] rowSelected = customersTable.getSelectedRows();
        if (rowSelected.length < 1) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn dòng muốn xóa!");
            return;
        } else if (rowSelected.length > 1) {
            JOptionPane.showMessageDialog(this, "Không thể sửa nhiều hàng cùng một lúc!");
            customersTable.clearSelection();
            return;
        }
        int confirm = JOptionPane.showConfirmDialog(this,
                "Bạn có chắc chắn muốn cập nhật không?",
                "Thông báo!",
                JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
            Customer cust = new Customer();
            try {
                cust = new Customer(
                        Integer.parseInt(custIdTxt.getText()),
                        getFirstName(custNameTxt.getText()),
                        getLastName(custNameTxt.getText()),
                        customerGenderCb.getSelectedItem().toString(),
                        formatter.parse(custDobTxt.getText()),
                        toTitleCase(custAddressTxt.getText()),
                        custContactTxt.getText(),
                        custIdProofTxt.getText()
                );
            } catch (Exception e) {
                System.out.println(e);
            }
            boolean flag = new ConnectDB(user, password).updateCustomerQuery(cust);
            if (!flag) {
                JOptionPane.showMessageDialog(this, "Có lỗi xảy ra!");
            } else {
                JOptionPane.showMessageDialog(this, "Cập nhật thành công.");
                refreshInputCustBtn.doClick();
            }
        }
        showCustomerTable("");
    }//GEN-LAST:event_updateCustBtnActionPerformed

    private void editCustBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editCustBtnActionPerformed
        // TODO add your handling code here:
        int[] rowSelected = customersTable.getSelectedRows();
        if (rowSelected.length < 0) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn dòng muốn xóa!");
        } else if (rowSelected.length > 1) {
            JOptionPane.showMessageDialog(this, "Không thể sửa nhiều hàng cùng một lúc!");
            customersTable.clearSelection();
        } else {
            custIdTxt.setText(customersTable.getValueAt(rowSelected[0], 0).toString());
            custIdTxt.setEditable(false);
            custNameTxt.setText(customersTable.getValueAt(rowSelected[0], 1).toString() + " "
                    + customersTable.getValueAt(rowSelected[0], 2).toString());
            customerGenderCb.setSelectedItem(customersTable.getValueAt(rowSelected[0], 3).toString());
            custDobTxt.setText(customersTable.getValueAt(rowSelected[0], 4).toString());
            custAddressTxt.setText(customersTable.getValueAt(rowSelected[0], 5).toString());
            custContactTxt.setText(customersTable.getValueAt(rowSelected[0], 6).toString());
            custIdProofTxt.setText(customersTable.getValueAt(rowSelected[0], 7).toString());
        }
    }//GEN-LAST:event_editCustBtnActionPerformed

    private void deleteCustBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteCustBtnActionPerformed
        // TODO add your handling code here:
        int[] rowSelecteds = customersTable.getSelectedRows();
        if (rowSelecteds.length < 0) {
            JOptionPane.showMessageDialog(this, "Vui lòng chọn dòng muốn xóa!");
        } else {
            int confirm = JOptionPane.showConfirmDialog(
                    this,
                    "Bạn có chắn chắn muốn xóa dòng đã chọn không?",
                    "Thông báo!",
                    JOptionPane.YES_NO_OPTION);
            if (confirm == JOptionPane.YES_OPTION) {
                for (int i : rowSelecteds) {
                    Customer cust = new Customer();
                    cust.setId(Integer.parseInt(customersTable.getValueAt(i, 0).toString()));
                    boolean flag = new ConnectDB(user, password).deleteCustomerQuery(cust);
                    if (!flag) {
                        JOptionPane.showMessageDialog(this, "Đã xảy ra lỗi!");
                    } else {
                        JOptionPane.showMessageDialog(this, "Xóa thành công!");
                    }
                }
            }
            showCustomerTable("");
        }
    }//GEN-LAST:event_deleteCustBtnActionPerformed

    private void searchCustBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchCustBtnActionPerformed
        // TODO add your handling code here:
        ArrayList<String> querys = new ArrayList<>();
        if (!custIdTxt.getText().isEmpty()) {
            querys.add("Customers.Customer_ID = " + custIdTxt.getText());
        }
        if (!custNameTxt.getText().isEmpty()) {
            if (!getFirstName(custNameTxt.getText()).isEmpty()) {
                querys.add("Customers.First_Name = N'" + getFirstName(custNameTxt.getText()) + "'");
            }
            querys.add("Customers.Last_Name = N'" + getLastName(custNameTxt.getText()) + "'");
        }
        if (customerGenderCb.getSelectedIndex() != 0) {
            querys.add("Genders.Gender_Name = N'" + customerGenderCb.getSelectedItem().toString() + "'");
        }
        if (!custAddressTxt.getText().isEmpty()) {
            querys.add("Customers.Address = N'" + toTitleCase(custAddressTxt.getText()) + "'");
        }
        if (!custContactTxt.getText().isEmpty()) {
            querys.add("Customers.Contact = N'" + custContactTxt.getText() + "'");
        }
        if (!custDobTxt.getText().isEmpty()) {
            querys.add("Customers.DOB = CONVERT(date, '" + custDobTxt.getText() + "', 103)");
        }
        if (!custIdProofTxt.getText().isEmpty()) {
            querys.add("Customers.Id_Proof = N'" + custIdProofTxt.getText() + "'");
        }
        String query = "";
        if (!querys.isEmpty()) {
            query = "AND(" + String.join(") AND (", querys) + ")";
        }
        showCustomerTable(query);
    }//GEN-LAST:event_searchCustBtnActionPerformed

    private void bookingLoadInforCustomerBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bookingLoadInforCustomerBtnActionPerformed
        // TODO add your handling code here:
        ArrayList<Customer> cust = new ConnectDB(user, password).selectCustomerQuery(
                "AND (Customers.Customer_Id = " + bookingCustomerIdTxt.getText() + ")");
        if (cust.size() < 1) {
            JOptionPane.showMessageDialog(this, "ID không hợp lệ!");
        } else {
            SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
            Customer customer = cust.get(0);
            bookingNameCustTxt.setText(customer.getFirstName() + " " + customer.getLastName());
            bookingCustomerGenderCb.setSelectedItem(customer.getGender());
            bookingDOBTxt.setText(formatter.format(customer.getDob()));
            bookingAddressTxt.setText(customer.getAddress());
            bookingContactTxt.setText(customer.getContact());
            bookingIDProofTxt.setText(customer.getIdProof());
        }
    }//GEN-LAST:event_bookingLoadInforCustomerBtnActionPerformed

    private void managementRentRoomPageComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_managementRentRoomPageComponentShown
        // TODO add your handling code here:
        showRentRoomTable("");
        biilTxt.setText("");
    }//GEN-LAST:event_managementRentRoomPageComponentShown

    private void rentRoomSearchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rentRoomSearchBtnActionPerformed
        // TODO add your handling code here:
        String query = "";
        if (!rentRoomCustIdTxt.getText().isEmpty()) {
            query += " AND (Customer_Id = " + rentRoomCustIdTxt.getText() + ")";
        }
        if (!rentRoomRoomIdTxt.getText().isEmpty()) {
            query += " AND (Room_Id = " + new ConnectDB(user, password).getRoomId("AND (Room_Number = N'" + rentRoomRoomIdTxt.getText() + "')") + ")";
        }
        showRentRoomTable(query);
    }//GEN-LAST:event_rentRoomSearchBtnActionPerformed

    private long getDaysBetween(Date a, Date b) {
        return TimeUnit.DAYS.convert((b.getTime() - a.getTime()), TimeUnit.MILLISECONDS);
    }

    private void viewBillBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBillBtnActionPerformed
        // TODO add your handling code here:
        int rowSelected = rentRoomTable.getSelectedRow();
        String rId = rentRoomTable.getValueAt(rowSelected, 0).toString();
        Reservation reservation = new ConnectDB(user, password).selectReservationsQuery(" AND (Reservations.Reservation_Id = " + rId + ")").get(0);
        Customer cust = new ConnectDB(user, password).selectCustomerQuery(" AND (Customers.Customer_Id = " + reservation.getCustomerId() + ")").get(0);
        Room room = new ConnectDB(user, password).selectQueryRooms(" AND (Rooms.Room_Id = " + reservation.getRoomId() + ")").get(0);
        SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
        SimpleDateFormat formatterTime = new SimpleDateFormat("dd/MM/YYYY - hh:mm aa");
        long total = getDaysBetween(reservation.getCheckIn(), reservation.getCheckOut()) * room.getPrice();
        String bill = "\tHoá đơn số: HD" + reservation.getId() + "\n"
                + "\t----------------------------------\n"
                + "\t\tKhách hàng\n"
                + "\t\t-------------\n"
                + "\tHọ và tên: " + cust.getFirstName() + " " + cust.getLastName() + "\n"
                + "\tGiới tính: " + cust.getGender() + "\n"
                + "\tNgày sinh: " + formatter.format(cust.getDob()) + "\n"
                + "\tĐịa chỉ: " + cust.getAddress() + "\n"
                + "\tLiên hệ: " + cust.getContact() + "\n"
                + "\tSố căn cước: " + cust.getIdProof() + "\n"
                + "\t\t-------------\n"
                + "\tPhòng:             " + room.getNumber() + "\n"
                + "\tNgày nhận phòng:   " + formatterTime.format(reservation.getCheckIn()) + "\n"
                + "\tNgày trả phòng:    " + formatterTime.format(reservation.getCheckOut()) + "\n"
                + "\tGiá:               " + String.format("%,d", room.getPrice()) + "\n"
                + "\t\t-------------\n"
                + "\tThành tiền: " + String.format("%,d", total) + "\n"
                + "\tĐặt cọc:    " + String.format("%,d", reservation.getDeposit()) + "\n"
                + "\tThanh toán: " + String.format("%,d", total - reservation.getDeposit()) + "\n"
                + "\t----------------------------------\n"
                + "\tPTIT Hotel kính chào quý khách!\n"
                + "\tChúc quý khách một ngày vui vẻ.";

        biilTxt.setText(bill);
    }//GEN-LAST:event_viewBillBtnActionPerformed

    private void confirmCheckOutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmCheckOutBtnActionPerformed
        // TODO add your handling code here:
        int rowSelected = rentRoomTable.getSelectedRow();
        String rId = rentRoomTable.getValueAt(rowSelected, 0).toString();
        Reservation reservation = new ConnectDB(user, password).selectReservationsQuery(" AND (Reservations.Reservation_Id = " + rId + ")").get(0);
        Customer cust = new ConnectDB(user, password).selectCustomerQuery(" AND (Customers.Customer_Id = " + reservation.getCustomerId() + ")").get(0);
        Room room = new ConnectDB(user, password).selectQueryRooms(" AND (Rooms.Room_Id = " + reservation.getRoomId() + ")").get(0);
        boolean flag = new ConnectDB(user, password).deleteReservation(reservation);
        if (flag) {
            JOptionPane.showMessageDialog(this, "Thanh toán thành công.");
            showRentRoomTable("");
        } else {
            JOptionPane.showMessageDialog(this, "Đã có lỗi xảy ra, vui lòng thử lại sau!");
        }
    }//GEN-LAST:event_confirmCheckOutBtnActionPerformed

    private void homePageComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_homePageComponentShown
        // TODO add your handling code here:
        homeRefreshBtn.doClick();
    }//GEN-LAST:event_homePageComponentShown

    private void homeRefreshBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeRefreshBtnActionPerformed
        // TODO add your handling code here:
        ArrayList<Room> list = new ConnectDB(user, password).selectQueryRooms("");
        int emptyRoom = 0;
        int totalRoom = list.size();
        for (Room i : list) {
            if (i.getStatus().compareTo("Trống") == 0) {
                emptyRoom += 1;
            }
        }
        int bookedRoom = totalRoom - emptyRoom;
        emptyRoomLabel.setText("" + emptyRoom);
        bookedRoomLabel.setText("" + bookedRoom);
        totalRoomLabel.setText("" + totalRoom);
    }//GEN-LAST:event_homeRefreshBtnActionPerformed

    private void logoutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logoutBtnActionPerformed
        new Login().setVisible(true);
        this.dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_logoutBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainGUI("sa", "123456").setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox RoomConfirmEnterRoomTypeCheckBox;
    private javax.swing.JButton addRoomBtn;
    private javax.swing.JTextArea biilTxt;
    private javax.swing.JLabel bookedRoomLabel;
    private javax.swing.JTextField bookingAddressTxt;
    private javax.swing.JLabel bookingBtn;
    private javax.swing.JTextField bookingCheckInDateTxt;
    private javax.swing.JTextField bookingCheckOutDateTxt;
    private javax.swing.JButton bookingConfirmBtn;
    private javax.swing.JTextField bookingContactTxt;
    private javax.swing.JComboBox<String> bookingCustomerGenderCb;
    private javax.swing.JTextField bookingCustomerIdTxt;
    private javax.swing.JTextField bookingDOBTxt;
    private javax.swing.JTextField bookingDepositTxt;
    private javax.swing.JTextField bookingIDProofTxt;
    private javax.swing.JButton bookingLoadInforCustomerBtn;
    private javax.swing.JTextField bookingNameCustTxt;
    private javax.swing.JPanel bookingPage;
    private javax.swing.JTextField bookingReservationDateTxt;
    private javax.swing.JTextField bookingRoomNumberTxt;
    private javax.swing.JButton bookingSelectRoomsBtn;
    private javax.swing.JLabel checkOutBtn;
    private javax.swing.JButton confirmCheckOutBtn;
    private javax.swing.JTextField custAddressTxt;
    private javax.swing.JLabel custBtn;
    private javax.swing.JTextField custContactTxt;
    private javax.swing.JTextField custDobTxt;
    private javax.swing.JTextField custIdProofTxt;
    private javax.swing.JTextField custIdTxt;
    private javax.swing.JTextField custNameTxt;
    private javax.swing.JComboBox<String> customerGenderCb;
    private javax.swing.JPanel customerPage;
    private javax.swing.JTable customersTable;
    private javax.swing.JButton deleteCustBtn;
    private javax.swing.JButton editCustBtn;
    private javax.swing.JButton editRoomBtn;
    private javax.swing.JLabel emptyRoomLabel;
    private javax.swing.JPanel header;
    private javax.swing.JLabel homeBtn;
    private javax.swing.JPanel homePage;
    private javax.swing.JButton homeRefreshBtn;
    private javax.swing.JPanel inputForm;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JButton logoutBtn;
    private javax.swing.JPanel managementRentRoomPage;
    private javax.swing.JPanel menu;
    private javax.swing.JButton refreshInputCustBtn;
    private javax.swing.JButton refreshInputRoomBtn;
    private javax.swing.JButton removeRoomBtn;
    private javax.swing.JTextField rentRoomCustIdTxt;
    private javax.swing.JTextField rentRoomRoomIdTxt;
    private javax.swing.JButton rentRoomSearchBtn;
    private javax.swing.JTable rentRoomTable;
    private javax.swing.JLabel roomBtn;
    private javax.swing.JButton roomCancelBtn;
    private javax.swing.JButton roomCancelSelectBtn;
    private javax.swing.JComboBox<String> roomCapacityCb;
    private javax.swing.JCheckBox roomComfirmEnterRoomPriceCheckBox;
    private javax.swing.JTextField roomNoteTxt;
    private javax.swing.JComboBox<String> roomNumberBedCb;
    private javax.swing.JTextField roomNumberTxt;
    private javax.swing.JPanel roomPage;
    private javax.swing.JComboBox<String> roomPriceCb;
    private javax.swing.JTextField roomRoomPriceTxt;
    private javax.swing.JTextField roomRoomTypeTxt;
    private javax.swing.JComboBox<String> roomStatusCb;
    private javax.swing.JTable roomTable;
    private javax.swing.JComboBox<String> roomTypeCb;
    private javax.swing.JButton searchCustBtn;
    private javax.swing.JButton searchRoomBtn;
    private javax.swing.JLabel totalRoomLabel;
    private javax.swing.JButton updateCustBtn;
    private javax.swing.JButton updateRoomTaleBtn;
    private javax.swing.JButton viewBillBtn;
    private javax.swing.JPanel workSpace;
    // End of variables declaration//GEN-END:variables
}
